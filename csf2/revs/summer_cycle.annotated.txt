CSF 2025 Paper #3 Reviews and Comments
===========================================================================
Paper #3 Secure Composition of Robust and Optimising Compilers


Review #3A
===========================================================================

Overall merit
-------------
2. Weak reject

Reviewer expertise
------------------
4. Expert

Paper summary
-------------
The paper studies the question of when two or more secure compilers can be composed while preserving robust-security properties. The result is applicable to compilers that robustly preserve classes of trace properties and is demonstrated via a case study combining temporal and spatial memory safety, constant time execution, and speculative safety.

Strengths
---------
- The question of compositional security of secure compilers is important for the design and implementation of practical secure compilers and security mitigations.
- The technical material appears to be correct and thoroughly considered.
- The case study is ambitious and models a number of relevant and practical security mechanisms.

Weaknesses
----------
- The paper does not discuss the related work "Weird Machines as Insecure Compilation" by Paykin et al (https://arxiv.org/pdf/1911.00157), which postulates similar criteria for composability of secure compilers in Section IV, as well as requirements for behavior (trace) relations between languages.
> not peer-review published, but ok.
> the weird machines pdf discusses composition of compilers from a different angle, where the composition tells us something about the actual exploit, if it exists

- The formalization covers only the core (highly abstract) composition result, and not the case study or the correct property proof in Section VII.B.
> it is in the technical report and parts of the case study are mechanized in Coq.

- The paper only addresses composition of compilers that robustly preserve trace properties, though previous work highlights the importance of robust preservation of hyper-properties. Of particular note, the constant time and speculative security properties in the case study are trace-approximations of hyper properties that more directly encode the desired security model. While a composition argument for hyper-property-preserving secure compilers may be infeasible (is it?), it would be nice to at least address whether the trace-approximation of the desired hyper-property is preserved under the current model.
> the work is not limited to trace properties and it scales to hyper-properties, too.
> almost always, hyper-safety properties are proven by means of overapproximation with ordinary safety properties.

- The composition result depends heavily on the validity of the trace relation that accompanies a compiler and transports properties of source and target. Spending some time with the definitions, I'm relatively convinced that they capture the desired properties, but the case study falls short at exploring potential nuances, since the relations considered are relatively trivial: either simple equality or erasing information that only appears in the target trace. This, in combination with the enforcement mechanisms used, makes the composition result seem relatively specific to the studied languages and compilers.
> this is precisely the point! the relations simplify dramatically
> see an extended account, where relations of real-world compiler passes may appear "trivial", too
> the composition results are language-independent, so I don't understand the last point

- The brittleness described above is demonstrated in Section VII.B. which notes how the actual correctness of the composition depends closely on the composability of the chosen trace relations. Given how critical theorem VII.1 is, it should appear much earlier in the text---probably as a precondition of the composition result. Again, the complicated cases here are made simple by the choice of enforcement mechanism, which makes broader application of the approach more difficult to assess.
> Since it is not strictly a precondition to actually do the composition, we refrain from adding Theorem VII.1 as actual precondition to the main theorem

- As identified in a separate review, there are technical issues with the part of the case study on constant time.
> no, we rely on FaCT!

Comments for authors
--------------------
- Having already bought in on the broader goal of secure compilation, I found the introduction to focus a little heavily on the importance of the specific combination of properties included in the case study---I'm not sure the broader community would recognize SpecMS as a gold standard, particularly as CCT and SS are very specific trace-simplifications of broader hyper-properties that could be enforced in other ways. This also caused the strncpy example to feel a little forced, particularly its vulnerability if called with a pointer to uninitialized memory.
> such vulnerabilities happen in real code-bases, so I'm unsure how this feels "forced"

- Section II glosses over the fact that previous work in this area has considered hyper-properties as well as trace properties
> wrong, see above

- The correctness criteria for trace relations discussed in Section VII should appear in Section II (as a pre-requisite for secure composition?)
> disagree, since it is not strictly required as precondition and more as a check that the composition actually makes sense

- The usefulness of the upper and lower composition theorems was unclear. Consider dropping this subsection?
> i agree.

- IV.B. mentions "monitors" for the first time. I take this to mean the enforcement of hyper-properties via trace approximations, but the term nor the concept has been introduced. As mentioned in the "Weaknesses" section, I think the paper would be improved by addressing this point more directly (even if a result for hyper-properties is out of reach).


- It's a lot to ask, but I feel like the paper would be improved by exploring a slightly more complex enforcement of one or more of the properties where more than pass ordering is required to ensure composability (perhaps allowing DCE to run after Constant Time Preservation if some branches are marked protected or something?)
> The work considers a pipeline that "works" and presents what happens if this breaks in VII.C
> I don't think adding more discussion of how other interactions may break is beneficial

Requested Changes
-----------------
At a minimum, the authors should:
- address the related work noted in the "weaknesses section"
> sure, easy minor revision

- make the content/property in Section VII.B more apparent in the earlier technical material
> i disagree with this 'philosophically'...

- address the mismatch between the constant-time and speculative-safety hyperproperties and the enforced trace properties more directly
> sure


Review #3B
===========================================================================

Overall merit
-------------
2. Weak reject

Reviewer expertise
------------------
3. Knowledgeable

Paper summary
-------------
This paper presents a framework for formally assessing the properties obtained from the composition of robust & secure compilation passes (memory safety, (speculative)-constant time hardening) along with optimisation passes (e.g. dead code elimination, constant propagation)

To that extend, the paper gives (pretty general) necessary conditions for two secure compilation passes to be safely composed and/or swapped. These properties are then examplified on different compilation passes (memory safety, speculative constant-time, optimisation passes), leading to a formal treatment of their composition.

The paper's results have been formally verified in the Coq proof assistant.

Strengths
---------
 - impactful topic
 - paper is well-structured and easy to read
 - numerous examples are given
 - results are formally verified
> how is this a weak reject?

Weaknesses
----------
 - hard to assess what are the gain of using the presented framework w.r.t. more elementary correctness proofs
> you get to skip these more classic security proofs.... 
> we should emphasize this more in the paper

Comments for authors
--------------------
Despite the topic being of interest, the necessary conditions presented in the paper seem pretty general and it is hard to assess whether one gains some benefits (in term of proof effort) by using them over doing a direct proof of the soundness of the composition. For instance, I find that the examples fail to exemplify such benefits. 
That the sequence MS -> DCE/CF -> CC, in this order, composes well is not surprising.
> whether that sequence composes well or not is orthogonal to the actual proof effort you mention.
> in "classic" approaches, you'd have to do a purely syntactic proof of the correctness of this whole chain
> the framework presented allows you to only do the proofs individually and compose them,
> not needing to bother with these syntactic proofs

I would have liked to see a more intricate example that composed e.g. (s)CC with an optimisation pass that is know to preserve (s)CC, something that you may have if you statically checked that your input code is robustly (s)CC before any optimisation had the chance to take place.
> see section VII.C

Nothing is said about the Coq formalisation. At the very least, the authors should indicate what have been formally verified and maybe give some hints about the formalisation effort.
> Respective mechanized results are marked with a peacock-symbol which is explained in the list of contributions.
> I fail to get the point here

Minor:

 - l.509: this beyond -> this is beyond
 - the inference rules of Section V.F are hardly understandable from the context of the paper.



Review #3C
===========================================================================

Overall merit
-------------
1. Reject

Reviewer expertise
------------------
4. Expert

Paper summary
-------------
The paper addresses the critical issue of determining under which conditions the security 
properties ensured by different passes of a compiler can be combined to achieve a global 
security property guaranteed by the entire compiler.

-Section 2 introduces background on expressing security properties in terms of execution 
 traces with leakage and the notion of robust preservation for a compiler.
-Section 3 presents the concept of composition of secure compilers.
-Section 4 discusses different security notions, including memory safety, 
 strict cryptographic constant time, and speculative safety.
-Section 5 examines various compilation passes and their role in ensuring some security 
 properties.
-Section 6 explores the composition of different secure compilation passes and optimization 
 passes.
-Section 7 provides additional discussion on the importance of compilation order in this 
 context.

Strengths
---------
- Understanding how different secure compilation passes can be combined and mixed with 
traditional optimizing transformations is a timely and important topic.
- A small part of the paper is formally proven.

Weaknesses
----------
- The paper's presentation is difficult to follow, primarily due to the notation used 
  and inconsistent naming of concepts (e.g., secure compiler vs. preservation).
> what is there to improve in terms of notation? we'll gladly change it.

- The level of detail is not well chosen; often, too much low-level semantic detail 
  is provided without sufficient information or intuition to grasp it fully.
> e.g.?

- As a result, it is hard to understand what has been proved. 
   A simple lemma stating something like: 
    "if the source program satisfies properties A and B, 
     then the compiled program satisfies properties C and D" would be helpful.
> this lemma cannot be given in general, besides what has been done with Thrm VII.1

Most importantly, I believe results based on DOIT are incorrect. 
You seem to misunderstand the meaning of DOIT instructions. Using data operand independent 
timing (DOIT) mode will not help transform a non-constant-time (CCT) program into a CCT one. 
DOIT ensures only that the time taken by some instructions does not depend on their operands' values, 
and not all instructions, especially conditional jumps, are included.
For Intel, the list of DOIT instruction is provided here:
https://www.intel.com/content/www/us/en/developer/articles/technical/software-security-guidance/resources/data-operand-independent-timing-instructions.html

From Intel's documentation:
 "Although not relevant for most code, DOIT is useful for code specifically written 
  to execute in constant time, such as cryptographic algorithms. 
  This mode allows constant-time code to inform the processor that DOIT is needed."

Therefore, if your code is not already in constant time, setting the DOIT mode will 
not make it constant time. Thus, the compilation of the example I.1 
cannot become constant time just by setting a flag.
> this is a misunderstanding where - after an earlier revision of the paper - the fact that this work relies on FaCT got lost

Comments for authors
--------------------
- Line 189: "the we extend the" – this needs correction.
- Definition II.3: The definition uses different "a"s that differ only in font. 
  Using two different letters would improve readability significantly.
> the "a"s are nontheseless distinguishable and can be assigned to the same semantic category, i.e., traces, so that's why we won't change it
- Line 344: A period is missing before "This".
- Line 356: Can you explain why sCCT is novel?
> it is not novel and that is also not the point of the paper
